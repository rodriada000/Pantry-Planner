// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PantryPlanner.Services;

#nullable disable

namespace PantryPlannerCore.Migrations
{
    [DbContext(typeof(PantryPlannerContext))]
    [Migration("20220710220220_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PantryPlannerCore.Models.PantryPlannerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<int?>("CategoryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryTypeID");

                    b.Property<long?>("CreatedByKitchenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "CreatedByKitchenId" }, "IX_Category_CreatedByKitchenId");

                    b.HasIndex(new[] { "CategoryTypeId" }, "fkIdx_161");

                    b.ToTable("Category", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryType", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Ingredient", b =>
                {
                    b.Property<long>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IngredientId"), 1L, 1);

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AddedByUserID");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PreviewPicture")
                        .HasColumnType("image");

                    b.HasKey("IngredientId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Ingredient_CategoryId");

                    b.HasIndex(new[] { "AddedByUserId" }, "fkIdx_40");

                    b.ToTable("Ingredient", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.IngredientTag", b =>
                {
                    b.Property<long>("IngredientTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IngredientTagId"), 1L, 1);

                    b.Property<long?>("CreatedByKitchenUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByKitchenUserID");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientID");

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IngredientTagId");

                    b.HasIndex(new[] { "IngredientId" }, "fkIdx_198");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_201");

                    b.HasIndex(new[] { "CreatedByKitchenUserId" }, "fkIdx_204");

                    b.ToTable("IngredientTag", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Kitchen", b =>
                {
                    b.Property<long>("KitchenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KitchenId"), 1L, 1);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UniquePublicGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KitchenId");

                    b.HasIndex(new[] { "CreatedByUserId" }, "IX_Kitchen_CreatedByUserId");

                    b.ToTable("Kitchen", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenIngredient", b =>
                {
                    b.Property<long>("KitchenIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenIngredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KitchenIngredientId"), 1L, 1);

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientID");

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<long?>("AddedByKitchenUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("AddedByKitchenUserID");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("KitchenIngredientId", "IngredientId", "KitchenId");

                    b.HasIndex(new[] { "AddedByKitchenUserId" }, "fkIdx_115");

                    b.HasIndex(new[] { "CategoryId" }, "fkIdx_187");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_47");

                    b.HasIndex(new[] { "IngredientId" }, "fkIdx_50");

                    b.ToTable("KitchenIngredient", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenList", b =>
                {
                    b.Property<long>("KitchenListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KitchenListId"), 1L, 1);

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryID");

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KitchenListId");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_145");

                    b.HasIndex(new[] { "CategoryId" }, "fkIdx_175");

                    b.ToTable("KitchenList", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenListIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("KitchenListId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenListID");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientID");

                    b.Property<long?>("AddedFromRecipeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id", "KitchenListId", "IngredientId")
                        .HasName("PK_KitchenListRecipe");

                    b.HasIndex("AddedFromRecipeId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("KitchenListId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_KitchenListIngredient_CategoryId");

                    b.ToTable("KitchenListIngredient", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenRecipe", b =>
                {
                    b.Property<long>("KitchenRecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenRecipeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KitchenRecipeId"), 1L, 1);

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RecipeID");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("KitchenRecipeId", "KitchenId", "RecipeId");

                    b.HasIndex(new[] { "RecipeId" }, "fkIdx_100");

                    b.HasIndex(new[] { "CategoryId" }, "fkIdx_190");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_97");

                    b.ToTable("KitchenRecipe", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenUser", b =>
                {
                    b.Property<long>("KitchenUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KitchenUserId"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAcceptedInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("KitchenUserId");

                    b.HasIndex(new[] { "UserId" }, "fkIdx_19");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_22");

                    b.ToTable("KitchenUser", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.MealPlan", b =>
                {
                    b.Property<long>("MealPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MealPlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MealPlanId"), 1L, 1);

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryID");

                    b.Property<long?>("CreatedByKitchenUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByKitchenUserID");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<long>("KitchenId")
                        .HasColumnType("bigint")
                        .HasColumnName("KitchenID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MealPlanId");

                    b.HasIndex(new[] { "KitchenId" }, "fkIdx_108");

                    b.HasIndex(new[] { "CreatedByKitchenUserId" }, "fkIdx_123");

                    b.HasIndex(new[] { "CategoryId" }, "fkIdx_181");

                    b.ToTable("MealPlan", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.MealPlanRecipe", b =>
                {
                    b.Property<int>("MealPlanRecipeId")
                        .HasColumnType("int")
                        .HasColumnName("MealPlanRecipeID");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RecipeID");

                    b.Property<long>("MealPlanId")
                        .HasColumnType("bigint")
                        .HasColumnName("MealPlanID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MealPlanRecipeId", "RecipeId", "MealPlanId");

                    b.HasIndex(new[] { "RecipeId" }, "fkIdx_133");

                    b.HasIndex(new[] { "MealPlanId" }, "fkIdx_136");

                    b.ToTable("MealPlanRecipe", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Recipe", b =>
                {
                    b.Property<long>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RecipeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecipeId"), 1L, 1);

                    b.Property<int?>("CookTime")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedByUserID");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsPublic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrepTime")
                        .HasColumnType("int");

                    b.Property<string>("RecipeUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ServingSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecipeId");

                    b.HasIndex(new[] { "CreatedByUserId" }, "fkIdx_69");

                    b.ToTable("Recipe", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeIngredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeIngredientId"), 1L, 1);

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("IngredientID");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RecipeID");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(12,4)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RecipeIngredientId", "IngredientId", "RecipeId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredient", "app");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.RecipeStep", b =>
                {
                    b.Property<int>("RecipeStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeStepID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeStepId"), 1L, 1);

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RecipeID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("RecipeStepId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeStep", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Category", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.CategoryType", "CategoryType")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("TypeToCategoryFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "CreatedByKitchen")
                        .WithMany("Categories")
                        .HasForeignKey("CreatedByKitchenId")
                        .HasConstraintName("KitchenToCategoryFK");

                    b.Navigation("CategoryType");

                    b.Navigation("CreatedByKitchen");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Ingredient", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", "AddedByUser")
                        .WithMany("Ingredient")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("UserToIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("Ingredients")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("CategoryToIngredientFK");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.IngredientTag", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.KitchenUser", "CreatedByKitchenUser")
                        .WithMany("IngredientTags")
                        .HasForeignKey("CreatedByKitchenUserId")
                        .HasConstraintName("UserToTagFK");

                    b.HasOne("PantryPlannerCore.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientTags")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IngredientToTagFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("IngredientTags")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToTagFK");

                    b.Navigation("CreatedByKitchenUser");

                    b.Navigation("Ingredient");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Kitchen", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", "CreatedByUser")
                        .WithMany("Kitchen")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("UserToKitchenFK");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenIngredient", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.KitchenUser", "AddedByKitchenUser")
                        .WithMany("KitchenIngredients")
                        .HasForeignKey("AddedByKitchenUserId")
                        .HasConstraintName("KitchenUserToIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("KitchenIngredients")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("CategoryToKitchenIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Ingredient", "Ingredient")
                        .WithMany("KitchenIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IngredientToKitchenIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("KitchenIngredients")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToKitchenIngredientFK");

                    b.Navigation("AddedByKitchenUser");

                    b.Navigation("Category");

                    b.Navigation("Ingredient");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenList", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("KitchenLists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("CategoryToListFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("KitchenLists")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToListFK");

                    b.Navigation("Category");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenListIngredient", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Recipe", "AddedFromRecipe")
                        .WithMany("KitchenListIngredients")
                        .HasForeignKey("AddedFromRecipeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("RecipeToListIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("KitchenListIngredients")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PantryPlannerCore.Models.Ingredient", "Ingredient")
                        .WithMany("KitchenListIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IngredientToListIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.KitchenList", "KitchenList")
                        .WithMany("KitchenListIngredients")
                        .HasForeignKey("KitchenListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenListToIngredientFK");

                    b.Navigation("AddedFromRecipe");

                    b.Navigation("Category");

                    b.Navigation("Ingredient");

                    b.Navigation("KitchenList");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenRecipe", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("KitchenRecipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("CategoryToKitchenRecipeFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("KitchenRecipes")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToKitchenRecipeFK");

                    b.HasOne("PantryPlannerCore.Models.Recipe", "Recipe")
                        .WithMany("KitchenRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecipeToKitchenRecipeFK");

                    b.Navigation("Category");

                    b.Navigation("Kitchen");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenUser", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("KitchenUsers")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToKitchenUserFK");

                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", "User")
                        .WithMany("KitchenUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserToKitchenUserFK");

                    b.Navigation("Kitchen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.MealPlan", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Category", "Category")
                        .WithMany("MealPlans")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("CategoryToMealPlanFK");

                    b.HasOne("PantryPlannerCore.Models.KitchenUser", "CreatedByKitchenUser")
                        .WithMany("MealPlans")
                        .HasForeignKey("CreatedByKitchenUserId")
                        .HasConstraintName("KitchenUserToMealPlanFK");

                    b.HasOne("PantryPlannerCore.Models.Kitchen", "Kitchen")
                        .WithMany("MealPlans")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("KitchenToMealPlanFK");

                    b.Navigation("Category");

                    b.Navigation("CreatedByKitchenUser");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.MealPlanRecipe", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.MealPlan", "MealPlan")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MealPlanToRecipeFK");

                    b.HasOne("PantryPlannerCore.Models.Recipe", "Recipe")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecipeToMealPlanFK");

                    b.Navigation("MealPlan");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Recipe", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.PantryPlannerUser", "CreatedByUser")
                        .WithMany("Recipe")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("UserToRecipeFK");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.RecipeIngredient", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IngredientToRecipeIngredientFK");

                    b.HasOne("PantryPlannerCore.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecipeToRecipeIngredientFK");

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.RecipeStep", b =>
                {
                    b.HasOne("PantryPlannerCore.Models.Recipe", "Recipe")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecipeToStepFK");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.PantryPlannerUser", b =>
                {
                    b.Navigation("Ingredient");

                    b.Navigation("Kitchen");

                    b.Navigation("KitchenUser");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Category", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("KitchenIngredients");

                    b.Navigation("KitchenListIngredients");

                    b.Navigation("KitchenLists");

                    b.Navigation("KitchenRecipes");

                    b.Navigation("MealPlans");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.CategoryType", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Ingredient", b =>
                {
                    b.Navigation("IngredientTags");

                    b.Navigation("KitchenIngredients");

                    b.Navigation("KitchenListIngredients");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Kitchen", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("IngredientTags");

                    b.Navigation("KitchenIngredients");

                    b.Navigation("KitchenLists");

                    b.Navigation("KitchenRecipes");

                    b.Navigation("KitchenUsers");

                    b.Navigation("MealPlans");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenList", b =>
                {
                    b.Navigation("KitchenListIngredients");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.KitchenUser", b =>
                {
                    b.Navigation("IngredientTags");

                    b.Navigation("KitchenIngredients");

                    b.Navigation("MealPlans");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.MealPlan", b =>
                {
                    b.Navigation("MealPlanRecipes");
                });

            modelBuilder.Entity("PantryPlannerCore.Models.Recipe", b =>
                {
                    b.Navigation("KitchenListIngredients");

                    b.Navigation("KitchenRecipes");

                    b.Navigation("MealPlanRecipes");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
